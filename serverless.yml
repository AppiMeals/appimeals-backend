service: appimeals-backend

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-2

functions:
  users:
    handler: users.handler
    environment:
        DB_HOST: ${opt:DB_HOST}
        DB_USER: ${opt:DB_USER}
        DB_PASSWORD: ${opt:DB_PASSWORD}
    events:
      - http: 
          path: users
          method: get
          cors: true
      - http: 
          path: users
          method: post
          cors: true

  favourites:
    handler: favourites.handler
    environment:
        DB_HOST: ${opt:DB_HOST}
        DB_USER: ${opt:DB_USER}
        DB_PASSWORD: ${opt:DB_PASSWORD}
    events:
      - http: 
          path: favourites
          method: get
          cors: true
      - http: 
          path: favourites
          method: post
          cors: true
      - http: 
          path: favourites
          method: delete
          cors: true

  mealPreferences:
    handler: mealPreferences.handler
    environment:
        DB_HOST: ${opt:DB_HOST}
        DB_USER: ${opt:DB_USER}
        DB_PASSWORD: ${opt:DB_PASSWORD}
    events:
      - http: 
          path: mealPreferences
          method: get
          cors: true
      - http: 
          path: mealPreferences
          method: post
          cors: true
      - http: 
          path: mealPreferences
          method: put
          cors: true

  mealSelections:
    handler: mealSelections.handler
    environment:
        DB_HOST: ${opt:DB_HOST}
        DB_USER: ${opt:DB_USER}
        DB_PASSWORD: ${opt:DB_PASSWORD}
    events:
      - http: 
          path: mealSelections
          method: get
          cors: true
      - http: 
          path: mealSelections
          method: post
          cors: true
      - http: 
          path: mealSelections
          method: put
          cors: true

  recipes:
    handler: recipes.handler
    environment:
        DB_HOST: ${opt:DB_HOST}
        DB_USER: ${opt:DB_USER}
        DB_PASSWORD: ${opt:DB_PASSWORD}
    events:
      - http:
          path: browse-recipes
          method: get
          cors: true
      - http:
          path: browse-recipes
          method: post
          cors: true  


        
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
